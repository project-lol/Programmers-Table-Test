import App from "./src/app.js"

new App(document.querySelector(".App"))

/*
클릭한 페이지 번호에 따라서 데이터를 어떻게 불러올 것인가? 

불러온 데이터를 5개를 기준으로 나누어 배열의 형태로 저장한다. 
페이지 번호를 클릭하면, 나누어진 배열 중에서 해당 인덱스의 데이터를 렌더링한다. 
- 몇개로 나눌 지의 기준은 option을 클릭해서 가져온 데이터를 기반으로 나눈다. 


- 만약 맨 오늘쪽 버튼을 클릭할 경우에는 배열의 가장 마지막 인덱스에 해당하는 배열 목록을 렌더링한다. 
- 만약 페이지를 새로고침 했을 때도 해당 페이지 번호를 유지하고 싶다면 어떻게해야할까? 
로컬스토리지를 활용하는 방법이 있겠지만, 이렇게 하는 경우 맨 처음 해당 페이지를 들어올 때 0으로 초기화시켜줘야한다는 불편함이 존재한다. 

그렇다면 라우트를 이용하는 것이 좋은 방법이 될 것 같다.
라우트에서 /?listLength=5&index=1, /?listLength=5&index=2 와 같은 방식으로 이동시키면서 수정을 하는 것이 좋을 것 같다. 
리스트 업데이트 갯수를 15로 하고 싶다면, listLength=15&index=1와 같은 방식으로 이동시키는 것이다. 

- 알아봐야할 것. 
  - /?listLength와 &index 같은 값들을 어떻게 불러와야할까?
  - table 태그로 어떻게 화면에 렌더링할 것인가? 
*/

/*
1. 
메인 페이지에서 데이터 정보를 불러와 콘솔로 출력한다. v
*/

/*
2.
모든 컴포넌트를 렌더링 할 app.js를 만든다. v
*/

/*
3.
table 컴포넌트를 만든다.
*/

/*
4. 
table 컴포넌트에 받아온 데이터를 넣는다. 
*/

/*
5.v
table 컴포넌트에 스타일을 입힌다. 
- 헤드배경색 : #d3d3d3 v
- 짝수배경색 : #d3d3d3 v
- 테이블의 모든 글자는 가운데에 정렬합니다. v
- 테이블의 헤더 영역의 글자는 굵게 표시합니다. v
*/

/*
6.
페이지네이션 버튼을 클릭하면, 클릭된 인덱스를 url에 반영하도록 수정한다. 
이것을 위해서는 먼저 라우터를 만들어야 한다. 

6.1 
라우터를 만든다. 

6.2
페이지네이션 컴포넌트를 만든다. 
페이지네이션 컴포넌트의 책임은 2가지다. 
- 주어진 length에 따라 페이지 버튼을 만든다. v
- 페이지 버튼을 클릭하면, url이 변경되도록 만든다. v
*/

/*
7. 
라우터의 쿼리스트링 값을 가져오도록 만든다. v
쿼리스트링 값이 변경될 때마다 app의 state에 저장하도록 만든다. v 
*/

/*
8.
데이터를 불러 올 위치를 결정해야한다. 
app 바깥에서 불러오기, 
app의 render 안에서 불러오기. 
app의 contructor에서 불러오기. 

페이지가 변경될 때마다, render를 시켜줘야하니, render안에 넣는 것이 맞을 것 같다. 

getData 함수를 만든다. v
- getData 함수는 listLength, currentIndex라는 2개의 인자를 받는다. 
- listLength를 가지고, 주어진 배열을 자른다. 
- currentIndex값을 가지고 잘린 배열 중에서 선택해서 반환한다. 
*/

/*
9. v
페이지 네이션에서 현재 페이지 버튼에는 빨간 불이 들어오도록 만든다. 
*/

/*
10. v
페이지 네이션 버튼에서 가장 오른쪽과 가장 왼쪽 바튼을 누르면 맨 첫번째 아이템과 마지막 아이템을 렌더링한다. 
*/

/*
11. 
드롭다운 컴포넌트를 구현한다. (로직은 나중에)
*/

/*
12. 
드롭다운에서 옵션을 클릭해서 받아온 값은 listLength이다. 
이 listLength 값을 가지고, 다시 새롭게 렌더링을 해야한다. 
이런 경우에는 콜백으로 옵션이 변경되었을 때, 해당 값을 가지고 다시 렌더링할 수 있도록 만들어줘야한다. 

그러면 그냥 app.js에서는 this.render 함수를 드롭다운에 넣어주고, 
드롭다운에서는 this.render를 호출하기전에 라우트를 변경시켜주면 된다. 
*/
